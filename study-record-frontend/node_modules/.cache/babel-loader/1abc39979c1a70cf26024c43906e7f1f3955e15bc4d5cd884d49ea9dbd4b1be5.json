{"ast":null,"code":"var _jsxFileName = \"D:\\\\00_Engineer\\\\90_tools\\\\React\\\\study-record\\\\study-record\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport listPlugin from \"@fullcalendar/list\";\nimport { ChakraProvider, useDisclosure } from \"@chakra-ui/react\";\nimport theme from \"./theme/theme\";\nimport { useState } from \"react\";\nimport { RecordModal } from \"./app/carendar/RecordModal\";\nimport { useRecord } from \"./_hooks/useRecord\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n  // 記録リスト\n  const {\n    records\n  } = useRecord();\n\n  // 選択された記録\n  const [targetRecord, setTargetRecord] = useState();\n\n  // モーダルのモード\n  const [isNew, setIsNew] = useState(false);\n\n  // モーダルの状態\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n\n  // 記録リストをeventオブジェクトに変換\n  const events = records.map(record => ({\n    id: record.id,\n    title: `${record.time} ${record.LearningContent.contentName}`,\n    start: record.date\n  }));\n\n  // イベントのフォーマット\n  const renderEventContent = eventInfo => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: eventInfo === null || eventInfo === void 0 ? void 0 : eventInfo.timeText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        children: eventInfo === null || eventInfo === void 0 ? void 0 : eventInfo.event.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  // 日付クリック\n  const handleDateClick = arg => {\n    setIsNew(true);\n    onOpen();\n  };\n\n  // イベントクリック\n  const eventClick = arg => {\n    setIsNew(false);\n    const targetRecord = records.find(record => record.id === arg.event.id);\n    setTargetRecord(targetRecord);\n    console.debug(arg.event.id);\n    console.debug(targetRecord);\n    onOpen();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ChakraProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n        locale: \"ja\",\n        plugins: [dayGridPlugin, interactionPlugin, listPlugin],\n        headerToolbar: {\n          left: \"prev,next today\",\n          center: \"title\",\n          right: \"dayGridMonth listWeek\" // 追加\n        },\n        dateClick: handleDateClick,\n        eventContent: renderEventContent,\n        initialView: \"dayGridMonth\",\n        eventClick: eventClick,\n        events: events\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RecordModal, {\n        isNew: isNew,\n        isOpen: isOpen,\n        targetRecord: targetRecord,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(App, \"4Os7YwbTVLRMpKJo0Esu7UtSQXg=\", false, function () {\n  return [useRecord, useDisclosure];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["FullCalendar","dayGridPlugin","interactionPlugin","listPlugin","ChakraProvider","useDisclosure","theme","useState","RecordModal","useRecord","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","records","targetRecord","setTargetRecord","isNew","setIsNew","isOpen","onOpen","onClose","events","map","record","id","title","time","LearningContent","contentName","start","date","renderEventContent","eventInfo","children","timeText","fileName","_jsxFileName","lineNumber","columnNumber","event","handleDateClick","arg","eventClick","find","console","debug","locale","plugins","headerToolbar","left","center","right","dateClick","eventContent","initialView","_c","$RefreshReg$"],"sources":["D:/00_Engineer/90_tools/React/study-record/study-record/src/App.tsx"],"sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin, { DateClickArg } from \"@fullcalendar/interaction\";\nimport {\n  EventClickArg,\n  EventContentArg,\n  EventSourceInput,\n} from \"@fullcalendar/core\";\nimport listPlugin from \"@fullcalendar/list\";\n\nimport { ChakraProvider, useDisclosure } from \"@chakra-ui/react\";\nimport theme from \"./theme/theme\";\nimport { useState } from \"react\";\nimport { RecordModal } from \"./app/carendar/RecordModal\";\nimport { useRecord } from \"./_hooks/useRecord\";\nimport { Record } from \"./_types/Record\";\n\nexport const App = () => {\n  // 記録リスト\n  const { records } = useRecord();\n\n  // 選択された記録\n  const [targetRecord, setTargetRecord] = useState<Record>();\n\n  // モーダルのモード\n  const [isNew, setIsNew] = useState(false);\n\n  // モーダルの状態\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  // 記録リストをeventオブジェクトに変換\n  const events: EventSourceInput = records.map((record) => ({\n    id: record.id,\n    title: `${record.time} ${record.LearningContent.contentName}`,\n    start: record.date,\n  }));\n\n  // イベントのフォーマット\n  const renderEventContent = (eventInfo: EventContentArg) => {\n    return (\n      <>\n        <b>{eventInfo?.timeText}</b>\n        <i>{eventInfo?.event.title}</i>\n      </>\n    );\n  };\n\n  // 日付クリック\n  const handleDateClick = (arg: DateClickArg) => {\n    setIsNew(true);\n    onOpen();\n  };\n\n  // イベントクリック\n  const eventClick = (arg: EventClickArg) => {\n    setIsNew(false);\n    const targetRecord = records.find((record) => record.id === arg.event.id);\n    setTargetRecord(targetRecord);\n    console.debug(arg.event.id);\n    console.debug(targetRecord);\n    onOpen();\n  };\n\n  return (\n    <>\n      <ChakraProvider theme={theme}>\n        <FullCalendar\n          locale=\"ja\"\n          plugins={[dayGridPlugin, interactionPlugin, listPlugin]}\n          headerToolbar={{\n            left: \"prev,next today\",\n            center: \"title\",\n            right: \"dayGridMonth listWeek\", // 追加\n          }}\n          dateClick={handleDateClick}\n          eventContent={renderEventContent}\n          initialView=\"dayGridMonth\"\n          eventClick={eventClick}\n          events={events}\n        />\n        <RecordModal\n          isNew={isNew}\n          isOpen={isOpen}\n          targetRecord={targetRecord}\n          onClose={onClose}\n        ></RecordModal>\n      </ChakraProvider>\n    </>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}