{"ast":null,"code":"var _jsxFileName = \"D:\\\\00_Engineer\\\\90_tools\\\\React\\\\study-record\\\\study-record\\\\src\\\\App.tsx\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport theme from \"./theme/theme\";\nimport { CarendarTemplate } from \"./app/carendar/CarendarTemplate\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  // // 記録リスト\n  // const { records } = useRecord();\n\n  // // 選択された記録\n  // const [selectedRecord, setSelectedRecord] = useState<Record>();\n\n  // // モーダルのモード\n  // const [isNew, setIsNew] = useState(false);\n\n  // // モーダルの状態\n  // const { isOpen, onOpen, onClose } = useDisclosure();\n\n  // // 記録リストをeventオブジェクトに変換\n  // const events: EventSourceInput = records.map((record) => ({\n  //   id: record.id,\n  //   title: `${record.time} ${record.LearningContent.contentName}`,\n  //   start: record.date,\n  // }));\n\n  // // イベントのフォーマット\n  // const renderEventContent = (eventInfo: EventContentArg) => {\n  //   return (\n  //     <>\n  //       <b>{eventInfo?.timeText}</b>\n  //       <i>{eventInfo?.event.title}</i>\n  //     </>\n  //   );\n  // };\n\n  // // 日付クリック\n  // const handleDateClick = (arg: DateClickArg) => {\n  //   setIsNew(true);\n  //   setSelectedRecord(undefined);\n  //   onOpen();\n  // };\n\n  // // イベントクリック\n  // const eventClick = (arg: EventClickArg) => {\n  //   setIsNew(false);\n  //   const targetRecord = records.find((record) => record.id === arg.event.id);\n  //   setSelectedRecord(targetRecord);\n  //   console.debug(arg.event.id);\n  //   console.debug(targetRecord);\n  //   onOpen();\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ChakraProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(CarendarTemplate, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ChakraProvider","theme","CarendarTemplate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/00_Engineer/90_tools/React/study-record/study-record/src/App.tsx"],"sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin, { DateClickArg } from \"@fullcalendar/interaction\";\nimport {\n  DayCellContentArg,\n  EventClickArg,\n  EventContentArg,\n  EventSourceInput,\n} from \"@fullcalendar/core\";\nimport listPlugin from \"@fullcalendar/list\";\n\nimport { ChakraProvider, useDisclosure } from \"@chakra-ui/react\";\nimport theme from \"./theme/theme\";\nimport { useState } from \"react\";\nimport { RecordModal } from \"./app/carendar/RecordModal\";\nimport { useRecord } from \"./_hooks/useRecord\";\nimport { Record } from \"./_types/Record\";\nimport { CarendarTemplate } from \"./app/carendar/CarendarTemplate\";\n\nexport const App = () => {\n  // // 記録リスト\n  // const { records } = useRecord();\n\n  // // 選択された記録\n  // const [selectedRecord, setSelectedRecord] = useState<Record>();\n\n  // // モーダルのモード\n  // const [isNew, setIsNew] = useState(false);\n\n  // // モーダルの状態\n  // const { isOpen, onOpen, onClose } = useDisclosure();\n\n  // // 記録リストをeventオブジェクトに変換\n  // const events: EventSourceInput = records.map((record) => ({\n  //   id: record.id,\n  //   title: `${record.time} ${record.LearningContent.contentName}`,\n  //   start: record.date,\n  // }));\n\n  // // イベントのフォーマット\n  // const renderEventContent = (eventInfo: EventContentArg) => {\n  //   return (\n  //     <>\n  //       <b>{eventInfo?.timeText}</b>\n  //       <i>{eventInfo?.event.title}</i>\n  //     </>\n  //   );\n  // };\n\n  // // 日付クリック\n  // const handleDateClick = (arg: DateClickArg) => {\n  //   setIsNew(true);\n  //   setSelectedRecord(undefined);\n  //   onOpen();\n  // };\n\n  // // イベントクリック\n  // const eventClick = (arg: EventClickArg) => {\n  //   setIsNew(false);\n  //   const targetRecord = records.find((record) => record.id === arg.event.id);\n  //   setSelectedRecord(targetRecord);\n  //   console.debug(arg.event.id);\n  //   console.debug(targetRecord);\n  //   onOpen();\n  // };\n\n  return (\n    <>\n      <ChakraProvider theme={theme}>\n        <CarendarTemplate />\n        {/* <FullCalendar\n          locale=\"ja\"\n          plugins={[dayGridPlugin, interactionPlugin, listPlugin]}\n          businessHours={{ daysOfWeek: [1, 2, 3, 4, 5] }}\n          headerToolbar={{\n            left: \"prev,next today\",\n            center: \"title\",\n            right: \"dayGridMonth listWeek\", // 追加\n          }}\n          dateClick={handleDateClick}\n          eventContent={renderEventContent}\n          initialView=\"dayGridMonth\"\n          eventClick={eventClick}\n          events={events}\n        />\n        <RecordModal\n          isNew={isNew}\n          isOpen={isOpen}\n          selectedRecord={selectedRecord}\n          onClose={onClose}\n        ></RecordModal> */}\n      </ChakraProvider>\n    </>\n  );\n};\n"],"mappings":";AAWA,SAASA,cAAc,QAAuB,kBAAkB;AAChE,OAAOC,KAAK,MAAM,eAAe;AAKjC,SAASC,gBAAgB,QAAQ,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnE,OAAO,MAAMC,GAAG,GAAGA,CAAA,KAAM;EACvB;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,eACEJ,OAAA,CAACJ,cAAc;MAACC,KAAK,EAAEA,KAAM;MAAAO,QAAA,eAC3BJ,OAAA,CAACF,gBAAgB;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAsBN;EAAC,gBACjB,CAAC;AAEP,CAAC;AAACC,EAAA,GA3EWN,GAAG;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}