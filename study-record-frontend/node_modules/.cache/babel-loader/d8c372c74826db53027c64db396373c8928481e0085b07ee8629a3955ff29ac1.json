{"ast":null,"code":"var _jsxFileName = \"D:\\\\00_Engineer\\\\90_tools\\\\React\\\\study-record\\\\study-record\\\\src\\\\app\\\\carendar\\\\CarendarTemplate.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useDisclosure } from \"@chakra-ui/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport listPlugin from \"@fullcalendar/list\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport { RecordModal } from \"./RecordModal\";\nimport { useRecord } from \"../../_hooks/useRecord\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CarendarTemplate = () => {\n  _s();\n  // 記録リスト\n  const {\n    records\n  } = useRecord();\n\n  // 選択された記録\n  const [selectedRecord, setSelectedRecord] = useState();\n\n  // モーダルのモード\n  const [isNew, setIsNew] = useState(false);\n\n  // モーダルの状態\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n\n  // 記録リストをeventオブジェクトに変換\n  const events = records.map(record => ({\n    id: record.id,\n    title: `${record.time} ${record.LearningContent.contentName}`,\n    start: record.date\n  }));\n\n  // イベントのフォーマット\n  const renderEventContent = eventInfo => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: eventInfo === null || eventInfo === void 0 ? void 0 : eventInfo.timeText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        children: eventInfo === null || eventInfo === void 0 ? void 0 : eventInfo.event.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  // 日付クリック\n  const handleDateClick = arg => {\n    setIsNew(true);\n    setSelectedRecord(undefined);\n    onOpen();\n  };\n\n  // イベントクリック\n  const eventClick = arg => {\n    setIsNew(false);\n    const targetRecord = records.find(record => record.id === arg.event.id);\n    setSelectedRecord(targetRecord);\n    console.debug(arg.event.id);\n    console.debug(targetRecord);\n    onOpen();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n      locale: \"ja\",\n      plugins: [dayGridPlugin, interactionPlugin, listPlugin],\n      businessHours: {\n        daysOfWeek: [1, 2, 3, 4, 5]\n      },\n      headerToolbar: {\n        left: \"prev,next today\",\n        center: \"title\",\n        right: \"dayGridMonth listWeek\" // 追加\n      },\n      dateClick: handleDateClick,\n      eventContent: renderEventContent,\n      initialView: \"dayGridMonth\",\n      eventClick: eventClick,\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecordModal, {\n      isNew: isNew,\n      isOpen: isOpen,\n      selectedRecord: selectedRecord,\n      onClose: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(CarendarTemplate, \"ezQlQJWyd264bnnCBEy7GHrS9Ks=\", false, function () {\n  return [useRecord, useDisclosure];\n});\n_c = CarendarTemplate;\nvar _c;\n$RefreshReg$(_c, \"CarendarTemplate\");","map":{"version":3,"names":["useState","useDisclosure","dayGridPlugin","interactionPlugin","listPlugin","FullCalendar","RecordModal","useRecord","jsxDEV","_jsxDEV","Fragment","_Fragment","CarendarTemplate","_s","records","selectedRecord","setSelectedRecord","isNew","setIsNew","isOpen","onOpen","onClose","events","map","record","id","title","time","LearningContent","contentName","start","date","renderEventContent","eventInfo","children","timeText","fileName","_jsxFileName","lineNumber","columnNumber","event","handleDateClick","arg","undefined","eventClick","targetRecord","find","console","debug","locale","plugins","businessHours","daysOfWeek","headerToolbar","left","center","right","dateClick","eventContent","initialView","_c","$RefreshReg$"],"sources":["D:/00_Engineer/90_tools/React/study-record/study-record/src/app/carendar/CarendarTemplate.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useDisclosure } from \"@chakra-ui/react\";\r\nimport {\r\n  EventClickArg,\r\n  EventContentArg,\r\n  EventSourceInput,\r\n} from \"@fullcalendar/core\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport listPlugin from \"@fullcalendar/list\";\r\nimport { DateClickArg } from \"@fullcalendar/interaction\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\n\r\nimport { RecordModal } from \"./RecordModal\";\r\nimport { useRecord } from \"../../_hooks/useRecord\";\r\nimport { Record } from \"../../_types/Record\";\r\n\r\nexport const CarendarTemplate = () => {\r\n  // 記録リスト\r\n  const { records } = useRecord();\r\n\r\n  // 選択された記録\r\n  const [selectedRecord, setSelectedRecord] = useState<Record>();\r\n\r\n  // モーダルのモード\r\n  const [isNew, setIsNew] = useState(false);\r\n\r\n  // モーダルの状態\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  // 記録リストをeventオブジェクトに変換\r\n  const events: EventSourceInput = records.map((record) => ({\r\n    id: record.id,\r\n    title: `${record.time} ${record.LearningContent.contentName}`,\r\n    start: record.date,\r\n  }));\r\n\r\n  // イベントのフォーマット\r\n  const renderEventContent = (eventInfo: EventContentArg) => {\r\n    return (\r\n      <>\r\n        <b>{eventInfo?.timeText}</b>\r\n        <i>{eventInfo?.event.title}</i>\r\n      </>\r\n    );\r\n  };\r\n\r\n  // 日付クリック\r\n  const handleDateClick = (arg: DateClickArg) => {\r\n    setIsNew(true);\r\n    setSelectedRecord(undefined);\r\n    onOpen();\r\n  };\r\n\r\n  // イベントクリック\r\n  const eventClick = (arg: EventClickArg) => {\r\n    setIsNew(false);\r\n    const targetRecord = records.find((record) => record.id === arg.event.id);\r\n    setSelectedRecord(targetRecord);\r\n    console.debug(arg.event.id);\r\n    console.debug(targetRecord);\r\n    onOpen();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FullCalendar\r\n        locale=\"ja\"\r\n        plugins={[dayGridPlugin, interactionPlugin, listPlugin]}\r\n        businessHours={{ daysOfWeek: [1, 2, 3, 4, 5] }}\r\n        headerToolbar={{\r\n          left: \"prev,next today\",\r\n          center: \"title\",\r\n          right: \"dayGridMonth listWeek\", // 追加\r\n        }}\r\n        dateClick={handleDateClick}\r\n        eventContent={renderEventContent}\r\n        initialView=\"dayGridMonth\"\r\n        eventClick={eventClick}\r\n        events={events}\r\n      />\r\n      <RecordModal\r\n        isNew={isNew}\r\n        isOpen={isOpen}\r\n        selectedRecord={selectedRecord}\r\n        onClose={onClose}\r\n      ></RecordModal>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}